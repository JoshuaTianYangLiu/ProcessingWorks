//Joshua Liu
//April 4, 2019
//Mr.Rosen
//Draws a christmas themed greeting card

void setup() {
  //Setup
  size(800, 500);
  background(255);
  smooth();
  rectMode(CORNERS);
}
void draw() {
  sky();
  purpleTint();
  moon();
  stars();
  mountians();
  tree();
  snowflakes();
  snowman();
  words();
}
void sky() {
  //Night sky gradient
  int gradientY=0;
  color gradient;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
  gradient=lerpColor(#3f4c6b, #606c88, gradientY/200.0);
  stroke(gradient);
  line(0, gradientY, 800, gradientY);
  gradientY=gradientY+1;
}

void purpleTint() {
  //Purple night sky tint
  fill(#6B4984, 15);
  stroke(#6B4984, 15);
  ellipse(358, 164, 277, 209);
  ellipse(530, 164, 277, 209);
  ellipse(631, 16, 277, 209);
  ellipse(197, 164, 277, 209);
  ellipse(166, 92, 277, 209);
  ellipse(478, 18, 277, 209);
}
void moon() {
  //Moon
  fill(#f5f3ce);
  stroke(#e7e7dc);
  strokeWeight(8);
  ellipse(820, -40, 180, 180);
}
int starMove=0;
int starIncrement=1;
void stars() {
  //Stars
  strokeWeight(2);
  int starX;
  int starY;
  float starExtend=(sin(starMove/4)+1);
  starX=290;
  starY=50;
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=610;
  starY=60;
  starExtend=(sin(starMove/7)+1);
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=470;
  starY=90;
  starExtend=(sin(starMove/14)+1)*2;
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=120;
  starY=20;
  starExtend=(sin(starMove/3)+1);
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=160;
  starY=60;
  starExtend=(sin(starMove/9)+1)*2;
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=360;
  starY=120;
  starExtend=(sin(starMove/30))*2;
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starX=480;
  starY=20;
  starExtend=(sin(2*starMove/17)+1);
  fill(#F1FFFF);
  stroke(#F1FFFF);
  ellipse(starX, starY, 5+starExtend, 5+starExtend);
  line(starX-8-starExtend, starY, starX+8+starExtend, starY);
  line(starX, starY-8-starExtend, starX, starY+8+starExtend);
  stroke(#F1FFFF, 30);
  fill(#F1FFFF, 30);
  ellipse(starX, starY, 12+2*starExtend, 12+2*starExtend);
  starMove=starMove+starIncrement;
}
void mountians() {
  //Mountians
  fill(#D3E5F7);
  stroke(#D3E5F7);
  strokeWeight(1);
  beginShape();
  arc(80, 160, 240, 200, PI, 3*PI/2);
  vertex(80, 60);
  bezierVertex(180, 60, 180, 160, 400, 180);
  vertex(400, 500);
  vertex(-40, 500);
  vertex(-40, 160);
  endShape(CLOSE);
  fill(0, 0);
  stroke(#ECF7FF);
  strokeWeight(40);
  bezier(80, 80, 180, 80, 180, 180, 400, 200);
  arc(80, 180, 240, 200, PI, 3*PI/2);
  toboggan();
  strokeWeight(1);
  fill(#D8E1EA);
  stroke(#D8E1EA);
  arc(820, 300, 1000, 440, PI, 3*PI/2);
  rect(280, 300, 800, 500);
  fill(0, 0);
  stroke(#EBF0F7);
  strokeWeight(30);
  arc(820, 285, 1000, 440, 2*PI/3, 3*PI/2);
  strokeWeight(1);
  fill(#C9D2E0);
  stroke(#C9D2E0);
  beginShape();
  vertex(0, 240);
  bezierVertex(280, 240, 340, 370, 800, 360);
  vertex(800, 500);
  vertex(0, 500);
  endShape(CLOSE);
  fill(0, 0);
  stroke(#FAFBFD);
  strokeWeight(40);
  bezier(0, 260, 280, 260, 340, 390, 800, 380);
  strokeWeight(5);
  fill(#FAFBFD);
  beginShape();
  vertex(360, 350);
  bezierVertex(600, 400, 600, 440, 400, 460);
  bezierVertex(360, 467, 360, 485, 380, 500);
  vertex(800, 500);
  vertex(800, 400);
  endShape();
  ellipse(450, 415, 100, 20);
}
void tree() {
  //Tree
  fill(#53350A);
  stroke(#53350A);
  rect(138, 233, 142, 243);
  fill(#42692f);
  stroke(#42692f);
  triangle(140, 180, 125, 200, 155, 200);
  triangle(140, 195, 122, 215, 158, 215);
  triangle(140, 205, 120, 233, 160, 233);
}
void snowflakes() {
  //Snowflakes
  stroke(0);
  strokeWeight(1);
  int flakeX;
  int flakeY;
  flakeX=170;
  flakeY=170;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=70;
  flakeY=190;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=430;
  flakeY=210;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=710;
  flakeY=130;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=560;
  flakeY=360;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=180;
  flakeY=320;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=340;
  flakeY=420;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
  flakeX=680;
  flakeY=200;
  line(flakeX-5, flakeY, flakeX, flakeY-5);
  line(flakeX+5, flakeY, flakeX, flakeY-5);
  line(flakeX-5, flakeY, flakeX, flakeY+5);
  line(flakeX+5, flakeY, flakeX, flakeY+5);
  line(flakeX-5, flakeY, flakeX-10, flakeY);
  line(flakeX+5, flakeY, flakeX+10, flakeY);
  line(flakeX, flakeY-5, flakeX, flakeY-10);
  line(flakeX, flakeY+5, flakeX, flakeY+10);
  line(flakeX-5, flakeY-5, flakeX-8, flakeY-8);
  line(flakeX+5, flakeY-5, flakeX+8, flakeY-8);
  line(flakeX-5, flakeY+5, flakeX-8, flakeY+8);
  line(flakeX+5, flakeY+5, flakeX+8, flakeY+8);
}
void snowman() {
  //Snowman
  strokeWeight(10);
  stroke(#8d5c3e);
  line(700, 330, 759, 279);
  strokeWeight(7);
  line(755, 267, 760, 280);
  strokeWeight(4);
  line(760, 281, 775, 275);
  strokeWeight(10);
  line(580, 330, 500, 270);
  strokeWeight(8);
  line(485, 268, 500, 270);
  strokeWeight(6);
  line(500, 270, 505, 255);
  fill(#E4F2FF);
  stroke(#E6F3FB);
  strokeWeight(10);
  ellipse(640, 460, 150, 150);
  ellipse(640, 330, 110, 110);
  ellipse(640, 240, 70, 70);
  stroke(100);
  point(630, 230);
  point(650, 230);
  strokeWeight(6);
  bezier(620, 255, 635, 265, 645, 265, 660, 255);
  point(640, 300);
  point(640, 345);
  point(640, 420);
  point(640, 460);
}

int tobogganMoveX=0;
int tobogganInc=2;
void toboggan() {
  //Toboggan
  stroke(#c19a6b);
  stroke(#ECF7FF);
  strokeWeight(1);
  bezier(80, 60, 180, 58, 180, 160, 400, 180);
  float t = (cos(radians(tobogganMoveX-90))+1)/2;
  float pointX=bezierPoint(80, 180, 180, 400, t);
  float pointY=bezierPoint(60, 60, 160, 180, t);
  float tanX = bezierTangent(80, 180, 180, 400, t);
  float tanY = bezierTangent(60, 60, 160, 180, t);
  float a = atan2(tanY, tanX);
  a=a+PI;
  strokeWeight(6);
  stroke(#c19a6b);
  line(pointX-17*cos(a), pointY-17*sin(a), pointX+17*cos(a), pointY+17*sin(a));
  tobogganMoveX=tobogganMoveX+tobogganInc;
  fill(0, 0);
  arc(pointX-17*cos(a)+8*cos(a-3*PI/2), pointY-17*sin(a)+8*sin(a-3*PI/2), 16, 16, a-3*PI/2, a-PI/2);
}
int wordColor=0;
int wordIncrement=1;
void words() {
  int switchColor = wordColor/16;
  switchColor=switchColor%2;
  //Text
  PFont font;
  font = loadFont("Constantia-Bold-48.vlw");
  textFont(font);
  fill(179*switchColor,((switchColor+1)%2)*179,((switchColor+1)%2)*32+12);
  text("S", 20, 380);
  text("a", 71, 380);
  text("o", 119, 380);
  text("s", 179, 380);
  text("r", 253, 380);
  text("e", 300, 380);
  text("i", 345, 380);
  text("g", 392, 380);
  text("!", 440, 380);
  switchColor=(switchColor+1)%2;
  fill(179*switchColor,((switchColor+1)%2)*179,((switchColor+1)%2)*32+12);
  text("e", 45, 380);
  text("s", 97, 380);
  text("n", 148, 380);
  text("G", 217, 380);
  text("e", 274, 380);
  text("t", 326, 380);
  text("n", 361, 380);
  text("s", 418, 380);
  font=loadFont("SegoeScript-Bold-20.vlw");
  textFont(font);
  fill(#394166);
  text("From: Joshua", 200, 480);
  wordColor=wordColor+wordIncrement;
}
