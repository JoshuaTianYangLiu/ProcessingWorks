//Joshua Liu
//March 30, 2019
//Mr.Rosen
//Draws a form of my transformer Aeo.
void setup() {
  size(800, 500);
  int xPos=0;
  color gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);
  xPos=xPos+1;
  gradientCol=lerpColor(#56ab2f, #a8e063, xPos/800.0);
  stroke(gradientCol);
  line(xPos, 0, xPos, 500);

  //Additional setup
  stroke(0);
  smooth();
  fill(255);
  rectMode(CORNERS);

  //Ears
  triangle(160, 20, 160, 110, 180, 100);
  fill(200);
  quad(160, 20, 180, 20, 200, 90, 180, 100);
  fill(255);
  triangle(280, 20, 280, 110, 260, 100);
  fill(200);
  quad(280, 20, 300, 20, 300, 100, 280, 110);
  quad(200, 90, 263, 90, 260, 100, 180, 100);

  //Head
  fill(255);
  beginShape();
  vertex(160, 110);
  vertex(180, 100);
  vertex(260, 100);
  vertex(280, 110);
  vertex(260, 200);
  vertex(220, 220);
  vertex(180, 200);
  endShape(CLOSE);
  fill(200);
  quad(280, 110, 300, 100, 275, 190, 260, 200);

  //Mouth
  fill(200);
  arc(220, 165, 50, 50, 36.87*PI/180, 143.13*PI/180, CHORD);

  //Eyes
  fill(100);
  triangle(180, 140, 200, 140, 210, 120);
  triangle(230, 120, 260, 140, 240, 140);

  //Body
  fill(255);
  beginShape();
  vertex(180, 200);
  vertex(220, 220);
  vertex(260, 200);
  vertex(320, 480);
  vertex(280, 480);
  vertex(240, 320);
  vertex(200, 320);
  vertex(160, 480);
  vertex(120, 480);
  endShape(CLOSE);

  fill(#32CD32);
  triangle(220, 240, 210, 280, 230, 280);
  fill(200);
  triangle(210, 280, 230, 280, 227, 265);

  quad(160, 480, 185, 445, 218, 320, 200, 320);
  fill(200);
  quad(320, 480, 330, 440, 275, 190, 260, 200);

  //Left arm/hand
  fill(255);
  rect(60, 240, 80, 140);
  rect(20, 200, 120, 180);
  stroke(255);
  line(60, 200, 80, 200);
  line(60, 180, 80, 180);
  stroke(0);
  fill(200);
  quad(80, 240, 90, 230, 90, 200, 80, 200);
  fill(255);
  quad(167, 260, 172, 240, 80, 220, 80, 240);
  fill(200);
  quad(80, 220, 90, 215, 174, 233, 172, 240);
  beginShape();
  vertex(130, 195);
  vertex(130, 175);
  vertex(90, 175);
  vertex(90, 135);
  vertex(70, 135);
  vertex(60, 140);
  vertex(80, 140);
  vertex(80, 180);
  vertex(120, 180);
  vertex(120, 200);
  endShape(CLOSE);
  line(80, 140, 90, 135);
  line(80, 180, 90, 175);
  line(120, 180, 130, 175);
  quad(20, 180, 30, 174, 60, 174, 60, 180);

  //Right arm and hand
  fill(255);
  quad(273, 260, 269, 240, 380, 219, 380, 240);
  fill(200);
  quad(269, 240, 282, 230, 380, 211, 380, 220);
  fill(255);
  rect(380, 240, 400, 140);
  rect(340, 180, 440, 200);
  stroke(255);
  line(380, 200, 400, 200);
  line(380, 180, 400, 180);
  stroke(0);
  fill(200);
  quad(340, 180, 350, 170, 380, 170, 380, 180);
  quad(400, 240, 405, 230, 405, 200, 400, 200);
  beginShape();
  vertex(440, 200);
  vertex(445, 190);
  vertex(445, 170);
  vertex(405, 170);
  vertex(405, 130);
  vertex(385, 130);
  vertex(380, 140);
  vertex(400, 140);
  vertex(400, 180);
  vertex(440, 180);
  endShape(CLOSE);
  line(440, 180, 445, 170);
  line(400, 180, 405, 170);
  line(400, 140, 405, 130);
  fill(0);
  PFont font;
  font = loadFont("Gabriola-48.vlw");
  textFont(font);
  text("AEO.", 500, 100);
  font= loadFont("Gabriola-24.vlw");
  textFont(font);
  text("The robot that does your homework\nand help you get As in school.", 500, 175);
  text("Abilities:\n-Can make any area a study area\n-Turns into any study material needed\n-Helps you get A+s in school", 500, 250);
  text("Made by Joshua", 500, 425);
}
